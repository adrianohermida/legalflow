ğŸ“Œ Estrutura de Schemas e Banco de Dados
- Nunca criar tabelas no schema `public`, exceto quando for absolutamente necessÃ¡rio e aprovado previamente.
- Usar exclusivamente os schemas jÃ¡ existentes:
  â€¢ `legalflow` â†’ lÃ³gica e dados principais do app (padrÃ£o)
  â€¢ `freshdesk` â†’ staging e dados vindos da integraÃ§Ã£o Freshdesk
  â€¢ `huggy` â†’ staging e dados vindos da integraÃ§Ã£o Huggy
- Qualquer nova tabela deve ser criada no schema correto (nunca no `public` por padrÃ£o).
- Views sempre que possÃ­vel para expor dados combinados; evitar duplicaÃ§Ã£o de dados.

ğŸ“Œ IntegraÃ§Ãµes e API
- Reutilizar rotas de API existentes antes de criar novas.
- Todas as chamadas para APIs externas (Freshdesk, Huggy, HubSpot, Escavador, Advise, Stripe) devem usar as rotas do servidor jÃ¡ definidas, nunca acessar direto do client.
- Nunca expor chaves de API ou tokens no client. Usar funÃ§Ãµes de servidor (Next.js API Routes) que leem do cofre (`legalflow.secrets` via Supabase).

ğŸ“Œ UX/UI e ConsistÃªncia Visual
- Preservar paleta de cores, espaÃ§amentos e tipografia jÃ¡ definidos no projeto.
- NÃ£o substituir classes Bootstrap/Next UI por customizaÃ§Ãµes desnecessÃ¡rias que quebrem consistÃªncia visual.
- Evitar adicionar efeitos visuais ou componentes que nÃ£o estejam alinhados com o padrÃ£o existente.
- Seguir padrÃµes de layout e responsividade jÃ¡ implementados nas pÃ¡ginas.

ğŸ“Œ Performance e OtimizaÃ§Ã£o
- Reaproveitar pÃ¡ginas, rotas e componentes existentes ao invÃ©s de criar novos do zero.
- Preferir otimizar queries e filtros no backend (Supabase) ao invÃ©s de sobrecarregar o client.
- Evitar duplicar lÃ³gica de integraÃ§Ã£o; centralizar consumo de dados em hooks e funÃ§Ãµes jÃ¡ criadas.
- Minimizar nÃºmero de chamadas Ã  API (uso de paginaÃ§Ã£o, filtros no server, cache leve no client).

ğŸ“Œ Boas PrÃ¡ticas no Builder.io
- Nomear novos blocos/componentes de forma clara, seguindo padrÃ£o do projeto.
- Usar componentes registrados no Builder ao invÃ©s de criar novos sem necessidade.
- Ao gerar cÃ³digo, manter imports, estilos e estrutura compatÃ­veis com o que jÃ¡ existe.
- NÃ£o alterar estrutura de rotas (`pages` ou `app`), exceto quando solicitado explicitamente.
- Em alteraÃ§Ãµes de pÃ¡ginas, preservar IDs e chaves de blocos para evitar reset de conteÃºdo.

ğŸ“Œ Fluxo de AprovaÃ§Ã£o
- Sempre validar se a modificaÃ§Ã£o impacta algum schema de forma nÃ£o planejada.
- Evitar retrabalho, verifique se a melhoria ou modificaÃ§Ã£o solicitada jÃ¡ foi realizada, apenas considere executar o que for compatÃ­vel, quando houver necssidade de ajuste e readequaÃ§Ã£o da programaÃ§Ã£o, apresentar plano de correÃ§Ã£o para aprovaÃ§Ã£o antes de executar.
- Garanta a normalizaÃ§Ã£o dos tÃ­tulos das paginas para a melhor experiencia do usuÃ¡rio.
- Testar novas implementaÃ§Ãµes em ambiente de staging antes de enviar para produÃ§Ã£o.
